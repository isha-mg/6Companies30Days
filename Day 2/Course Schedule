// https://leetcode.com/problems/course-schedule/description/

class Solution {
public:

    bool ans=true;
    unordered_set<int> s;
    void traverse(int a, vector<vector<int>>& adj, vector<bool>& vis)
    {
        cout<<a<<endl;
                
        if(vis[a]==1)
        {
            ans=false;
            return;  
        }
        if(s.find(a)==s.end())
        {
            s.insert(a);
        }
        else{
            ans=false;
            return; 
            }
        
        for(int i=0;i<adj[a].size();i++){
            if(vis[adj[a][i]]==0)
            traverse(adj[a][i],adj,vis);
        
    }
        cout<<"*"<<a<<endl;
        vis[a]=1;


    }

    bool canFinish(int vertex, vector<vector<int>>& edges) {
        ans=true;
        s.clear();
        if(edges.size()==1)
        return ans;
    vector<int> s;
    vector<vector<int>> adj(vertex,s);
    for(auto x: edges)
    {
        // adj[x[1]].push_back(x[0]);
        adj[x[0]].push_back(x[1]);
        // cout<<x[0]<<"->"<<x[1]<<endl;
    }
    for(int i=0;i<adj.size();i++){
        sort(adj[i].begin(),adj[i].end());
    }

    vector<bool> vis(vertex,0);

    // for(int i=0;i<vis.size();i++)
    // cout<<i<<" - "<<vis[i]<<endl;
    // traverse(0,adj,vis);


    for(int i=0;i<vertex;i++)
    {
        if(!vis[i])
        {
            if(ans){
            traverse(i,adj,vis);
            }
        }
    }

    return ans;
    }
};

// https://leetcode.com/problems/course-schedule/submissions/845799494/
