// https://leetcode.com/problems/number-of-pairs-satisfying-inequality/description/

class Solution {
public:
    long long merge(vector<int> &v, int left, int mid, int right, int diff)
    {
        long long ans=0;
        int l=left, r=mid+1;

        while(l<=mid && r<=right)
        {
            if(v[l]<= v[r]+diff)
            {
                l++;
                ans += (right-r+1);
            }
            else r++;
        }

        sort(v.begin()+left, v.begin()+right+1);
        return ans;
    }


    long long mergesort(vector<int> &v, int begin, int end, int diff)
    {
        // cout<<j<<endl;
        // j++;
        if(end<=begin){
            return 0;
        }

        int mid = begin + ((end-begin)/2);
        long long ans = mergesort(v, begin, mid,diff);
        ans += mergesort(v,mid+1,end,diff);
        ans += merge(v,begin,mid,end,diff);
        return ans;

    }

    long long numberOfPairs(vector<int>& nums1, vector<int>& nums2, int diff) {
        

        int n=nums1.size();
        vector<int> nums(n);
        for(int i=0;i<n;i++)
        {
            nums[i]=nums1[i]-nums2[i];
        }

        return mergesort(nums,0,n-1,diff);
    }
};

// https://leetcode.com/problems/number-of-pairs-satisfying-inequality/submissions/871061747/
