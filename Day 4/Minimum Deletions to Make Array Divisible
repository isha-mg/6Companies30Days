// https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/description/

class Solution {
public:
    int GcdOfArray(vector<int>& arr, int idx)
    {
        if (idx == arr.size() - 1) {
            return arr[idx];
        }
        int a = arr[idx];
        int b = GcdOfArray(arr, idx + 1);
        return __gcd(
            a, b); // __gcd(a,b) is inbuilt library function
    }
    int minOperations(vector<int>& nums, vector<int>& div) {
        long long d =  GcdOfArray(div,0);
        sort(nums.begin(),nums.end());
        int ans=0;
        int n=nums.size();
        for(int i=0;i<n;i++)
        {
            if(d % nums[i]==0)
                return ans;
            ans++;
        }
        return -1;
        
    }
};

// https://leetcode.com/problems/minimum-deletions-to-make-array-divisible/submissions/871163675/
