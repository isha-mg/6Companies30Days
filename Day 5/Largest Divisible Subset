// https://leetcode.com/problems/largest-divisible-subset/description/

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp(n,1), h(n);
        int maxi=1;
        int last=0;
        sort(nums.begin(),nums.end());
        for(int i=0;i<n;i++)
        {
            h[i]=i;
            for(int j=0;j<i;j++)
            {
                if(nums[i] % nums[j]==0 && 1+dp[j]>dp[i])
                {
                    dp[i]= 1+dp[j];
                    h[i]=j;
                }
            }

            if(dp[i]>maxi)
            {
                maxi = dp[i];
                last=i;
            }
        }

        vector<int> ans;
        ans.push_back(nums[last]);
        while(h[last]!= last)
        {
            last =h[last];
            ans.push_back(nums[last]);
        }

        reverse(ans.begin(),ans.end());

        return ans;
    }
};

//https://leetcode.com/problems/largest-divisible-subset/submissions/872063367/
