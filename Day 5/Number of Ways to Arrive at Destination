//  https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/description/

typedef pair<long long, long long> pi;
class Solution {
public:
    int countPaths(int n, vector<vector<int>>& roads) {

        vector<vector<pair<int,int>>> adj(n);
        for(int i=0;i<roads.size();i++)
        {
            adj[roads[i][0]].push_back({roads[i][1],roads[i][2]});
            adj[roads[i][1]].push_back({roads[i][0],roads[i][2]});
        }

        vector<long long> ways(n,0),dis(n,LONG_MAX);
        priority_queue<pi, vector<pi>, greater<pi> > q;
        dis[0]=0;
        ways[0]=1;
        q.push({0,0});
        while(!q.empty())
        {
            long long int node=q.top().second;
            long long int d=q.top().first;
            q.pop();
            for(auto x:adj[node])
            {
                if(d + x.second<dis[x.first])
                {
                    dis[x.first]=d+x.second;
                    ways[x.first]=ways[node]%1000000007;
                    q.push({d+x.second,x.first});
                }
                else if(d+x.second==dis[x.first])
                {
                    ways[x.first] = (ways[x.first]+ways[node]) % 1000000007;
                }
            }
        }

        return ways[n-1]%1000000007;
    }
};

// https://leetcode.com/problems/number-of-ways-to-arrive-at-destination/submissions/872186202/
