// https://leetcode.com/problems/maximum-subarray-min-product/description/

class Solution {
public:
    int mod=1e9 +7 ; 
    int maxSumMinProduct(vector<int>& nums) {
        int n=nums.size();
        vector<int> left(n);
        vector<int> right(n);
        vector<long long int> psum(n);
        psum[0]=nums[0];
        stack<int> st; 
        for(int i=0;i<n;i++)
        {
            if(i>0) psum[i]=nums[i]+psum[i-1];
            while(!st.empty() && nums[st.top()]>=nums[i])
            {
                st.pop();
            }
            if(st.empty()) left[i]=-1;
            else left[i]=st.top();
            st.push(i);

            // cout<<left[i]<<" ";
        }
        // cout<<endl;
        st = stack<int>();

        for(int i=n-1;i>=0;i--)
        {
            while(!st.empty() && nums[st.top()]>=nums[i])
            {
                st.pop();
            }
            if(st.empty()) right[i]=n;
            else right[i]=st.top();
            st.push(i);

        }
        long long int ans=0;
        for(int i=0;i<n;i++)
        {
            long long int sum;
            if(left[i]==-1)
            sum=nums[i]*psum[right[i]-1];
            else
            sum=nums[i]*(psum[right[i]-1]-psum[left[i]]);
            // cout<<sum<<endl;
            ans= max(ans,sum);
        }

        return ans % mod;
    }
};

// https://leetcode.com/problems/maximum-subarray-min-product/submissions/887395323/
