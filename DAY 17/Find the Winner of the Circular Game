// https://leetcode.com/problems/find-the-winner-of-the-circular-game/description/

struct ListNode1 {
     int val;
     ListNode1 *next;
     ListNode1() : val(0), next(nullptr) {}
     ListNode1(int x) : val(x), next(nullptr) {}
     ListNode1(int x, ListNode1 *next) : val(x), next(next) {}
};
class Solution {
public:
    int findTheWinner(int n, int k) {

        ListNode1* head;
        head = new ListNode1(1);
        ListNode1* temp=head;
        for(int i=2;i<=n;i++)
        {
            temp->next=new ListNode1(i);
            temp=temp->next;
        }
        temp->next=head;
        
        int i=0;
        ListNode1* temp1=head;
        while(i<n)
        {
            for(int i=1;i<k;i++){
                temp1=temp1->next;
                temp= temp->next;
            }
            // cout<<temp1->val<<endl;

            temp->next=temp1->next;
            temp1=temp1->next;
            // cout<<temp->val<<" "<<temp1->val<<endl;
            
            i++;
        }


        return temp->val;

    }
};

// https://leetcode.com/problems/find-the-winner-of-the-circular-game/submissions/879893837/
