// https://leetcode.com/problems/find-in-mountain-array/description/
class Solution {
public:
    int findInMountainArray(int x, MountainArray &a) {
        int n=a.length();
        int l=0, h=n-1;
        int m;
        while(l<=h)
        {
            m=(l+h)/2;
            cout<<l<<m<<h<<endl;
            if(m-1<0)
            {
                cout<<"L"<<endl;
                int p=a.get(m),q=a.get(m+1);
                if(p<=q)
                l=m+1;
                else if(p>=q)
                h=m-1;
                else if(p>=q) break;
            }
            else if(m+1>=n){
                cout<<"H"<<endl;
                int p=a.get(m-1),q=a.get(m);
                if(p<=q)
                l=m+1;
                else if(p>=q)
                h=m-1;
                else if(p<=q) break;
            }
            else
            {
                cout<<"M"<<endl;
                // cout<<a.get(m-1)<<a.get(m)<<a.get(m+1)<<endl;
                int p=a.get(m-1),q=a.get(m),r=a.get(m+1);
                if(p<=q && q<=r)
                l=m+1;
                else if(p>=q && q>=r)
                h=m-1;
                else if(p<=q && q>=r) break;
            }
        }
        // cout<<m<<endl;
        if(a.get(m)==x) return m;
        else if(a.get(m)<x) return -1;

        // cout<<m<<endl;
        int l1,l2,h1,h2,m1,m2;

            l1=0; h1=m; l2=m+1; h2=n-1;
        while(l1<=h1)
        {
             m1=(l1+h1)/2;
             int p=a.get(m1);
             if(p==x) return m1;
             else if(x<p) { h1=m1-1; }
             else if(x>p) { l1=m1+1; }

        }
        while(l2<=h2)
        { 
             m2=(l2+h2)/2;
             int p=a.get(m2);
            //  cout<<l2<<" "<<m2<<" "<<h2<<endl;
             if(p==x) return m2;
             else if(x<p) { l2=m2+1; }
             else if(x>p) { h2=m2-1; }

        }


        return -1;
    }
};

// https://leetcode.com/problems/find-in-mountain-array/submissions/880010387/
