// https://leetcode.com/problems/knight-probability-in-chessboard/description/

class Solution {
public:
    double knightProbability(int n, int k, int row, int column) {
        
        vector<double> b(n,0.0);
        vector<vector<double>> cur(n,b);
        cur[row][column]=1.0;
        // cout<<cur[2][2]<<endl;
        while(k--)
        {
            vector<vector<double>> nxt(n,b);
            for(int i=0;i<n;i++)
            {
                for(int j=0;j<n;j++)
                {
                    // if(i==2 && j==2) cout<<cur[i][j]<<endl;
                    if(i+2<n && j+1<n)
                    {
                        nxt[i+2][j+1] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i+2][j+1]<<endl;
                    }
                    if(i+2<n && j-1>=0)
                    {
                        nxt[i+2][j-1] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i+2][j-1]<<endl;
                    }
                    if(i-2>=0 && j+1<n)
                    {
                        nxt[i-2][j+1] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i-2][j+1]<<endl;
                    }
                    if(i-2>=0 && j-1>=0)
                    {
                        nxt[i-2][j-1] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i-2][j-1]<<endl;
                    }

                    if(i+1<n && j+2<n)
                    {
                        nxt[i+1][j+2] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i+1][j+2]<<endl;
                    }
                    if(i+1<n && j-2>=0)
                    {
                        nxt[i+1][j-2] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i+1][j-2]<<endl;
                    }
                    if(i-1>=0 && j+2<n)
                    {
                        nxt[i-1][j+2] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i-1][j+2]<<endl;
                    }
                    if(i-1>=0 && j-2>=0)
                    {
                        nxt[i-1][j-2] += cur[i][j]/8;
                        // cout<<cur[i][j]<<" "<<nxt[i-1][j-2]<<endl;
                    }

                    
                }
            }
            cur=nxt;
        }
        double ans=0.0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++){
            // cout<<cur[i][j]<<" ";
            ans += cur[i][j];
            }
            // cout<<endl;
        }

        return ans;
    }
};

// https://leetcode.com/problems/knight-probability-in-chessboard/submissions/877840812/
