// https://leetcode.com/problems/house-robber-iii/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
unordered_map<TreeNode*,int> m;
int traverse(TreeNode* root)
{
    if(root==NULL) return 0;
    if(m.find(root)!=m.end()) return m[root];

    int LE=0; 
    if(root->left!=NULL)
    LE = traverse(root->left->left) + traverse(root->left->right); 
    int LI=traverse(root->left);

    int RE=0;
    if(root->right!=NULL)
    RE = traverse(root->right->left) + traverse(root->right->right);
    int RI=traverse(root->right);

    m[root]=max(root->val + LE + RE, LI + RI);
    return max(root->val + LE + RE, LI + RI);
}

class Solution {
public:
    int rob(TreeNode* root) {
        return traverse(root);
    }
};

// https://leetcode.com/problems/house-robber-iii/submissions/881775875/
