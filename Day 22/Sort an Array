// https://leetcode.com/problems/sort-an-array/description/

class Solution {
public:

    void merge(int s, int m, int e, vector<int>& nums)
    {
        vector<int> left,right;
        for(int i=s;i<=m;i++)
        left.push_back(nums[i]);

        for(int i=m+1;i<=e;i++)
        right.push_back(nums[i]);

        int n=nums.size();
        int l=0,r=0,a=s;

        while(l<left.size() && r<right.size())
        {
            if(left[l]<right[r]){
                nums[a]=left[l];
                l++;
            }else{
                nums[a]=right[r];
                r++;
            }
            a++;
        }

        while(l<left.size())
        {
            nums[a]=left[l];
            l++; a++;
        }

        while(r<right.size())
        {
            nums[a]=right[r];
            r++; a++;
        }
        
    }
    void mergesort(int s,int e,vector<int>& nums)
    {
        if(s>=e) return;
        int m=(s+e)/2;
        mergesort(s,m,nums);
        mergesort(m+1,e,nums);

        merge(s,m,e,nums);
    }

    vector<int> sortArray(vector<int>& nums) {
        int n=nums.size();
        mergesort(0,n-1,nums);
        return nums;
    }
};

// https://leetcode.com/problems/sort-an-array/submissions/882945825/
