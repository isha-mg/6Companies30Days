// https://leetcode.com/problems/top-k-frequent-words/

class Solution {
public:
    vector<string> topKFrequent(vector<string>& words, int k) {

        int n=words.size();
        unordered_map<string,int> m;
        for(int i=0;i<n;i++)
        {
            m[words[i]]++;
        }
        priority_queue<pair<int, string> > q;
        for(auto x:m) q.push({x.second,x.first});
        int a=0; vector<string> b; int i=0;
        while(!q.empty())
        {
            if(a==q.top().first){
                a=q.top().first;
                b.push_back(q.top().second);
                q.pop();
            } else {
                sort(b.begin()+i,b.end());
                i=b.size();
                a=q.top().first;
            }
        }
        sort(b.begin()+i,b.end());

        while(b.size()!=k)
        {
            b.pop_back();
        }

        return b;
    }
};

// https://leetcode.com/problems/top-k-frequent-words/submissions/880366286/
