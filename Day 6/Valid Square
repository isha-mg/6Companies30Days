// https://leetcode.com/problems/valid-square/description/

class Solution {
public:

    double dis(vector<int>& a, vector<int>& b)
    {
        double x1=a[0], y1=a[1], x2=b[0], y2=b[1];

        return sqrt(pow(x2-x1,2) + pow(y2-y1,2));
    }
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        
        if(p1==p2 || p1==p3 || p1==p4 || p2==p3 || p2==p4 || p3==p4)
        return false;

        vector<double> v(6);
        v[0]=dis(p1,p2);
        v[1]=dis(p1,p3);
        v[2]=dis(p1,p4);
        v[3]=dis(p2,p3);
        v[4]=dis(p2,p4);
        v[5]=dis(p3,p4);

        sort(v.begin(),v.end());

        if(v[0]==v[1] && v[1]==v[2] && v[2]==v[3] && v[4]==v[5])
        return true;
        else return false;
    }
};

// https://leetcode.com/problems/valid-square/submissions/872800375/
