// https://leetcode.com/problems/number-of-boomerangs/description/

class Solution {
public:

    double dis(vector<int>& a, vector<int>& b)
    {
        double x1=a[0], y1=a[1], x2=b[0], y2=b[1];

        return sqrt(pow(x2-x1,2) + pow(y2-y1,2));
    }


    int numberOfBoomerangs(vector<vector<int>>& v) {
        int n=v.size();
        int s=0;
        if(n<3) return 0;

        for(int i=0;i<n;i++)
        {
            unordered_map<double,int> m;
            // ans=0;
            for(int j=0;j<n;j++)
            {
                if(i==j) continue;
                double d=dis(v[i],v[j]);
                // if(m.find(d)!=m.end()) ans += 1;
                // else m.insert(d);
                m[d]++;

            }
            for(auto x:m)
            {
                if(x.second>1)
                s += (x.second*(x.second-1));
            }
            cout<<s<<endl;
        }

        cout<<s<<endl;
        return s;
    }
}; 

// https://leetcode.com/problems/number-of-boomerangs/submissions/872873054/
