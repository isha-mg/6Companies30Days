// https://leetcode.com/problems/number-of-closed-islands/description/

class Solution {
public:

    void traverse2(int x, int y, vector<vector<int>>& grid, int& m, int& n)
    {
        grid[x][y]=2;
        if(x+1<m && grid[x+1][y]==0) traverse2(x+1,y,grid,m,n);
        if(y+1<n && grid[x][y+1]==0) traverse2(x,y+1,grid,m,n);
        if(x-1>=0 && grid[x-1][y]==0) traverse2(x-1,y,grid,m,n);
        if(y-1>=0 && grid[x][y-1]==0) traverse2(x,y-1,grid,m,n);

    }

    void traverse1(int x, int y, vector<vector<int>>& grid, int& m, int& n)
    {
        grid[x][y]=2;
        if(x+1<m && grid[x+1][y]==0) traverse1(x+1,y,grid,m,n);
        if(y+1<n && grid[x][y+1]==0) traverse1(x,y+1,grid,m,n);
        if(x-1>=0 && grid[x-1][y]==0) traverse1(x-1,y,grid,m,n);
        if(y-1>=0 && grid[x][y-1]==0) traverse1(x,y-1,grid,m,n);
    }

    int closedIsland(vector<vector<int>>& grid) {
        int ans=0;
        int m=grid.size();
        int n=grid[0].size();

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==0 && (i==0 || j==0 || i==m-1 || j==n-1)){
                    // ans++; cout<<i<<" "<<j<<endl;
                traverse1(i,j,grid,m,n);
                }
            }
        }

        for(int i=0;i<m;i++){
        for(int j=0;j<n;j++)
        {
            // cout<<grid[i][j]<<" ";
            if(grid[i][j]==2) grid[i][j]=1;
        } //cout<<endl;
        }

        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==0){
                    ans++; //cout<<i<<" "<<j<<endl;
                traverse2(i,j,grid,m,n);
                }
            }
        }

        return ans;
    }
};

// https://leetcode.com/problems/number-of-closed-islands/submissions/882639342/
