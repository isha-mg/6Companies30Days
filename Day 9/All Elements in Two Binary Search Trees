// https://leetcode.com/problems/all-elements-in-two-binary-search-trees/description/

class Solution {
public:


    void traverse(TreeNode* root, vector<int>& ans)
    {
        if(root==NULL) return;
        traverse(root->left,ans);
        ans.push_back(root->val);
        traverse(root->right,ans);
    }
    vector<int> getAllElements(TreeNode* root1, TreeNode* root2) {
        
        vector<int> ans1,ans2,ans;
        traverse(root1,ans1);
        traverse(root2,ans2);

        int i=0,j=0;
        int n=ans1.size(), m=ans2.size();
        while(i<n && j<m)
        {
            if(ans1[i]<ans2[j])
            ans.push_back(ans1[i++]);
            else
            ans.push_back(ans2[j++]);
            cout<<i<<" "<<j<<endl;
        }

        while(i<n) ans.push_back(ans1[i++]);
        while(j<m) ans.push_back(ans2[j++]);

        return ans;

    }
};

// https://leetcode.com/problems/all-elements-in-two-binary-search-trees/submissions/874958745/
